

Read about scopes, closures, methods and hoisting in javascript
Read up on datatypes and variables, objects and arrays, operators, IIFE, methods vs functions


this
classes
constructors


DataTypes Will cover primitive and composite datatypes

Primitive
Declare a variable 'x', then assign a string value to it
Answer: x = 18
Emphasize the difference between the variable declaration and the variable assignment
Asnwer:  variable declaration is the process of specifying a variable's type and identifier, but not yet assigning a value to it. 
Variable assignment is the process of assigning a value to a variable, usually with the assignment operator (=). 

declare a variable 'boolish', then assign it a falsy value that is NOT the boolean "false"
Asnwer: Boolish = 0
primitive variables MUST be undefined at declaration.

Composite
Arrays
Declare a variable 'arrOne', then assign it an array that contains at least a number datatype, a boolean datatype, a nested array and an object.


log to the console at least 2 items from 'arrOne' and include at least one property from any object that is an item in 'arrOne' 
 
Objects
Declare a variable 'objectOne', then assign it an object that has at least 3 properties(key-value pairs) and one of the 3 properties must be an array that contains up to 4 items of various datatypes

log to the console 2 of the properties of 'objectOne' including at least one of the items from the array stored as a property in 'objectOne'

Functions/Methods
declare a function 'withFunctionKeyWord' -using the function keyword-that logs a string to the console when invoked

declare a function 'withExpression' -using a function expression-that logs a number to the console when invoked

declare a function 'arrowFunction' -using the arrow syntax -that logs a boolean to the console when invoked

declare a function 'withReturnValue' -using any declaration method of choice-that returns any number value when invoked

declare a function 'withParamValue' -using any declaration method of choice-that accepts a value as argument when invoked and returns that value

declare higher order function 'higherFunction' -using any declaration method of choice-that accepts two functions as arguments when invoked, and returns the sum of the invocations of both arguments as a return value

declare a function 'returnsThis' -that returns the value of 'this' when invoked. Then assign it to a property 'thisIsAMethod' in an object of your choice.
Invoke 'thisIsAMethod'

invoke 'thisIsAMethod' using the call explicit binding and manipulate the this to any value of choice.

CONSTRUCTORS & CLASSES
declare a constructor-"ConstructOne", that returns the instance of an object that has two properties "name" with a string value and "constructOneMethod" with a function that returns this.name
Asnwer: const ConstructOne
declare a constructor-"ConstructTwo", that accepts two arguments(name, method) and returns the instance of an object that maps the two arguments to two properties "name" and "constructTwoMethod". The "method" argument should be a higher order function.
declare a constructor "SubOne" that is a sub constructor of "ConstructTwo" above. In addition to the first two arguments, "SubOne" should accept an extra argument title that will be mapped to a "title" property with a value of string.

declare a class-"ClassOne", that accepts three arguments(name, title, position) and returns the instance of an object that maps the arguments to properties of the same names in the class constructor.
declare a method in ClassOne "methodOne" that returns the position property of the class instance when invoked. 
declare a method in ClassOne "methodTwo" that returns the title property of the class instance if the position property is less than 5 or the name property if the position is higher or equal to 5, when invoked. 

declare an array "stackObjects" containing at least 10 different objects in this format {name: "string", title:"string"}
using the map array method, loop through the array above and create a ClassOne instance for each object in the array, passing the name and title properties plus the index position of the object as the required arguments for the ClassOne invocation
